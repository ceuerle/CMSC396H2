THE IMPLEMENTATION OF PROTOCOL P ON A SENDING HOST S DECIDES,
THROUGH PROTOCOL P'S ROUTING MECHANISM, THAT IT WANTS TO TRANSMIT
TO A TARGET HOST T LOCATED SOME PLACE ON A CONNECTED PIECE OF
10MBIT ETHERNET CABLE.  TO ACTUALLY TRANSMIT THE ETHERNET PACKET
A 48.BIT ETHERNET ADDRESS MUST BE GENERATED.  THE ADDRESSES OF
HOSTS WITHIN PROTOCOL P ARE NOT ALWAYS COMPATIBLE WITH THE
CORRESPONDING ETHERNET ADDRESS (BEING DIFFERENT LENGTHS OR
VALUES).  PRESENTED HERE IS A PROTOCOL THAT ALLOWS DYNAMIC
DISTRIBUTION OF THE INFORMATION NEEDED TO BUILD TABLES TO
TRANSLATE AN ADDRESS A IN PROTOCOL P'S ADDRESS SPACE INTO A
48.BIT ETHERNET ADDRESS.

GENERALIZATIONS HAVE BEEN MADE WHICH ALLOW THE PROTOCOL TO BE
USED FOR NON-10MBIT ETHERNET HARDWARE.  SOME PACKET RADIO
NETWORKS ARE EXAMPLES OF SUCH HARDWARE.

--------------------------------------------------------------------

THE PROTOCOL PROPOSED HERE IS THE RESULT OF A GREAT DEAL OF
DISCUSSION WITH SEVERAL OTHER PEOPLE, MOST NOTABLY J. NOEL
CHIAPPA, YOGEN DALAL, AND JAMES E. KULP, AND HELPFUL COMMENTS
FROM DAVID MOON.




[THE PURPOSE OF THIS RFC IS TO PRESENT A METHOD OF CONVERTING
PROTOCOL ADDRESSES (E.G., IP ADDRESSES) TO LOCAL NETWORK
ADDRESSES (E.G., ETHERNET ADDRESSES).  THIS IS A ISSUE OF GENERAL
CONCERN IN THE ARPA INTERNET COMMUNITY AT THIS TIME.  THE
METHOD PROPOSED HERE IS PRESENTED FOR YOUR CONSIDERATION AND
COMMENT.  THIS IS NOT THE SPECIFICATION OF A INTERNET STANDARD.]

NOTES:
------

THIS PROTOCOL WAS ORIGINALLY DESIGNED FOR THE DEC/INTEL/XEROX
10MBIT ETHERNET.  IT HAS BEEN GENERALIZED TO ALLOW IT TO BE USED
FOR OTHER TYPES OF NETWORKS.  MUCH OF THE DISCUSSION WILL BE
DIRECTED TOWARD THE 10MBIT ETHERNET.  GENERALIZATIONS, WHERE
APPLICABLE, WILL FOLLOW THE ETHERNET-SPECIFIC DISCUSSION.

DOD INTERNET PROTOCOL WILL BE REFERRED TO AS INTERNET.

NUMBERS HERE ARE IN THE ETHERNET STANDARD, WHICH IS HIGH BYTE
FIRST.  THIS IS THE OPPOSITE OF THE BYTE ADDRESSING OF MACHINES
SUCH AS PDP-11S AND VAXES.  THEREFORE, SPECIAL CARE MUST BE TAKEN
WITH THE OPCODE FIELD (AR$OP) DESCRIBED BELOW.

AN AGREED UPON AUTHORITY IS NEEDED TO MANAGE HARDWARE NAME SPACE
VALUES (SEE BELOW).  UNTIL AN OFFICIAL AUTHORITY EXISTS, REQUESTS
SHOULD BE SUBMITTED TO
        DAVID C. PLUMMER
        SYMBOLICS, INC.
        243 VASSAR STREET
        CAMBRIDGE, MASSACHUSETTS  02139
ALTERNATIVELY, NETWORK MAIL CAN BE SENT TO DCP@MIT-MC.

THE PROBLEM:
------------

THE WORLD IS A JUNGLE IN GENERAL, AND THE NETWORKING GAME
CONTRIBUTES MANY ANIMALS.  AT NEARLY EVERY LAYER OF A NETWORK
ARCHITECTURE THERE ARE SEVERAL POTENTIAL PROTOCOLS THAT COULD BE
USED.  FOR EXAMPLE, AT A HIGH LEVEL, THERE IS TELNET AND SUPDUP
FOR REMOTE LOGIN.  SOMEWHERE BELOW THAT THERE IS A RELIABLE BYTE
STREAM PROTOCOL, WHICH MIGHT BE CHAOS PROTOCOL, DOD TCP, XEROX
BSP OR DECNET.  EVEN CLOSER TO THE HARDWARE IS THE LOGICAL
TRANSPORT LAYER, WHICH MIGHT BE CHAOS, DOD INTERNET, XEROX PUP,
OR DECNET.  THE 10MBIT ETHERNET ALLOWS ALL OF THESE PROTOCOLS
(AND MORE) TO COEXIST ON A SINGLE CABLE BY MEANS OF A TYPE FIELD
IN THE ETHERNET PACKET HEADER.  HOWEVER, THE 10MBIT ETHERNET
REQUIRES 48.BIT ADDRESSES ON THE PHYSICAL CABLE, YET MOST
PROTOCOL ADDRESSES ARE NOT 48.BITS LONG, NOR DO THEY NECESSARILY
HAVE ANY RELATIONSHIP TO THE 48.BIT ETHERNET ADDRESS OF THE
HARDWARE.  FOR EXAMPLE, CHAOS ADDRESSES ARE 16.BITS, DOD INTERNET
ADDRESSES ARE 32.BITS, AND XEROX PUP ADDRESSES ARE 8.BITS.  A
PROTOCOL IS NEEDED TO DYNAMICALLY DISTRIBUTE THE CORRESPONDENCES
BETWEEN A <PROTOCOL, ADDRESS> PAIR AND A 48.BIT ETHERNET ADDRESS.

MOTIVATION:
-----------

USE OF THE 10MBIT ETHERNET IS INCREASING AS MORE MANUFACTURERS
SUPPLY INTERFACES THAT CONFORM TO THE SPECIFICATION PUBLISHED BY
DEC, INTEL AND XEROX.  WITH THIS INCREASING AVAILABILITY, MORE
AND MORE SOFTWARE IS BEING WRITTEN FOR THESE INTERFACES.  THERE
ARE TWO ALTERNATIVES: (1) EVERY IMPLEMENTOR INVENTS HIS/HER OWN
METHOD TO DO SOME FORM OF ADDRESS RESOLUTION, OR (2) EVERY
IMPLEMENTOR USES A STANDARD SO THAT HIS/HER CODE CAN BE
DISTRIBUTED TO OTHER SYSTEMS WITHOUT NEED FOR MODIFICATION.  THIS
PROPOSAL ATTEMPTS TO SET THE STANDARD.

DEFINITIONS:
------------

DEFINE THE FOLLOWING FOR REFERRING TO THE VALUES PUT IN THE TYPE
FIELD OF THE ETHERNET PACKET HEADER:
        ETHER_TYPE$XEROX_PUP,
        ETHER_TYPE$DOD_INTERNET,
        ETHER_TYPE$CHAOS,
AND A NEW ONE:
        ETHER_TYPE$ADDRESS_RESOLUTION.
ALSO DEFINE THE FOLLOWING VALUES (TO BE DISCUSSED LATER):
        ARES_OP$REQUEST (= 1, HIGH BYTE TRANSMITTED FIRST) AND
        ARES_OP$REPLY   (= 2),
AND
        ARES_HRD$ETHERNET (= 1).

PACKET FORMAT:
--------------

TO COMMUNICATE MAPPINGS FROM <PROTOCOL, ADDRESS> PAIRS TO 48.BIT
ETHERNET ADDRESSES, A PACKET FORMAT THAT EMBODIES THE ADDRESS
RESOLUTION PROTOCOL IS NEEDED.  THE FORMAT OF THE PACKET FOLLOWS.

    ETHERNET TRANSMISSION LAYER (NOT NECESSARILY ACCESSIBLE TO
         THE USER):
        48.BIT: ETHERNET ADDRESS OF DESTINATION
        48.BIT: ETHERNET ADDRESS OF SENDER
        16.BIT: PROTOCOL TYPE = ETHER_TYPE$ADDRESS_RESOLUTION
    ETHERNET PACKET DATA:
        16.BIT: (AR$HRD) HARDWARE ADDRESS SPACE (E.G., ETHERNET,
                         PACKET RADIO NET.)
        16.BIT: (AR$PRO) PROTOCOL ADDRESS SPACE.  FOR ETHERNET
                         HARDWARE, THIS IS FROM THE SET OF TYPE
                         FIELDS ETHER_TYP$<PROTOCOL>.
         8.BIT: (AR$HLN) BYTE LENGTH OF EACH HARDWARE ADDRESS
         8.BIT: (AR$PLN) BYTE LENGTH OF EACH PROTOCOL ADDRESS
        16.BIT: (AR$OP)  OPCODE (ARES_OP$REQUEST | ARES_OP$REPLY)
        NBYTES: (AR$SHA) HARDWARE ADDRESS OF SENDER OF THIS
                         PACKET, N FROM THE AR$HLN FIELD.
        MBYTES: (AR$SPA) PROTOCOL ADDRESS OF SENDER OF THIS
                         PACKET, M FROM THE AR$PLN FIELD.
        NBYTES: (AR$THA) HARDWARE ADDRESS OF TARGET OF THIS
                         PACKET (IF KNOWN).
        MBYTES: (AR$TPA) PROTOCOL ADDRESS OF TARGET.


PACKET GENERATION:
------------------

AS A PACKET IS SENT DOWN THROUGH THE NETWORK LAYERS, ROUTING
DETERMINES THE PROTOCOL ADDRESS OF THE NEXT HOP FOR THE PACKET
AND ON WHICH PIECE OF HARDWARE IT EXPECTS TO FIND THE STATION
WITH THE IMMEDIATE TARGET PROTOCOL ADDRESS.  IN THE CASE OF THE
10MBIT ETHERNET, ADDRESS RESOLUTION IS NEEDED AND SOME LOWER
LAYER (PROBABLY THE HARDWARE DRIVER) MUST CONSULT THE ADDRESS
RESOLUTION MODULE (PERHAPS IMPLEMENTED IN THE ETHERNET SUPPORT
MODULE) TO CONVERT THE <PROTOCOL TYPE, TARGET PROTOCOL ADDRESS>
PAIR TO A 48.BIT ETHERNET ADDRESS.  THE ADDRESS RESOLUTION MODULE
TRIES TO FIND THIS PAIR IN A TABLE.  IF IT FINDS THE PAIR, IT
GIVES THE CORRESPONDING 48.BIT ETHERNET ADDRESS BACK TO THE
CALLER (HARDWARE DRIVER) WHICH THEN TRANSMITS THE PACKET.  IF IT
DOES NOT, IT PROBABLY INFORMS THE CALLER THAT IT IS THROWING THE
PACKET AWAY (ON THE ASSUMPTION THE PACKET WILL BE RETRANSMITTED
BY A HIGHER NETWORK LAYER), AND GENERATES AN ETHERNET PACKET WITH
A TYPE FIELD OF ETHER_TYPE$ADDRESS_RESOLUTION.  THE ADDRESS
RESOLUTION MODULE THEN SETS THE AR$HRD FIELD TO
ARES_HRD$ETHERNET, AR$PRO TO THE PROTOCOL TYPE THAT IS BEING
RESOLVED, AR$HLN TO 6 (THE NUMBER OF BYTES IN A 48.BIT ETHERNET
ADDRESS), AR$PLN TO THE LENGTH OF AN ADDRESS IN THAT PROTOCOL,
AR$OP TO ARES_OP$REQUEST, AR$SHA WITH THE 48.BIT ETHERNET ADDRESS
OF ITSELF, AR$SPA WITH THE PROTOCOL ADDRESS OF ITSELF, AND AR$TPA
WITH THE PROTOCOL ADDRESS OF THE MACHINE THAT IS TRYING TO BE
ACCESSED.  IT DOES NOT SET AR$THA TO ANYTHING IN PARTICULAR,
BECAUSE IT IS THIS VALUE THAT IT IS TRYING TO DETERMINE.  IT
COULD SET AR$THA TO THE BROADCAST ADDRESS FOR THE HARDWARE (ALL
ONES IN THE CASE OF THE 10MBIT ETHERNET) IF THAT MAKES IT
CONVENIENT FOR SOME ASPECT OF THE IMPLEMENTATION.  IT THEN CAUSES
THIS PACKET TO BE BROADCAST TO ALL STATIONS ON THE ETHERNET CABLE
ORIGINALLY DETERMINED BY THE ROUTING MECHANISM.


PACKET RECEPTION:
-----------------

WHEN AN ADDRESS RESOLUTION PACKET IS RECEIVED, THE RECEIVING
ETHERNET MODULE GIVES THE PACKET TO THE ADDRESS RESOLUTION MODULE
WHICH GOES THROUGH AN ALGORITHM SIMILAR TO THE FOLLOWING.
NEGATIVE CONDITIONALS INDICATE AN END OF PROCESSING AND A
DISCARDING OF THE PACKET.

?DO I HAVE THE HARDWARE TYPE IN AR$HRD?
YES: (ALMOST DEFINITELY)
  [OPTIONALLY CHECK THE HARDWARE LENGTH AR$HLN]
  ?DO I SPEAK THE PROTOCOL IN AR$PRO?
  YES:
    [OPTIONALLY CHECK THE PROTOCOL LENGTH AR$PLN]
    MERGE_FLAG := FALSE
    IF THE PAIR <PROTOCOL TYPE, SENDER PROTOCOL ADDRESS> IS
        ALREADY IN MY TRANSLATION TABLE, UPDATE THE SENDER
        HARDWARE ADDRESS FIELD OF THE ENTRY WITH THE NEW
        INFORMATION IN THE PACKET AND SET MERGE_FLAG TO TRUE.
    ?AM I THE TARGET PROTOCOL ADDRESS?
    YES:
      IF MERGE_FLAG IS FALSE, ADD THE TRIPLET <PROTOCOL TYPE,
          SENDER PROTOCOL ADDRESS, SENDER HARDWARE ADDRESS> TO
          THE TRANSLATION TABLE.
      ?IS THE OPCODE ARES_OP$REQUEST?  (NOW LOOK AT THE OPCODE!!)
      YES:
        SWAP HARDWARE AND PROTOCOL FIELDS, PUTTING THE LOCAL
            HARDWARE AND PROTOCOL ADDRESSES IN THE SENDER FIELDS.
        SET THE AR$OP FIELD TO ARES_OP$REPLY
        SEND THE PACKET TO THE (NEW) TARGET HARDWARE ADDRESS ON
            THE SAME HARDWARE ON WHICH THE REQUEST WAS RECEIVED.

NOTICE THAT THE <PROTOCOL TYPE, SENDER PROTOCOL ADDRESS, SENDER
HARDWARE ADDRESS> TRIPLET IS MERGED INTO THE TABLE BEFORE THE
OPCODE IS LOOKED AT.  THIS IS ON THE ASSUMPTION THAT COMMUNCATION
IS BIDIRECTIONAL; IF A HAS SOME REASON TO TALK TO B, THEN B WILL
PROBABLY HAVE SOME REASON TO TALK TO A.  NOTICE ALSO THAT IF AN
ENTRY ALREADY EXISTS FOR THE <PROTOCOL TYPE, SENDER PROTOCOL
ADDRESS> PAIR, THEN THE NEW HARDWARE ADDRESS SUPERSEDES THE OLD
ONE.  RELATED ISSUES GIVES SOME MOTIVATION FOR THIS.

GENERALIZATION:  THE AR$HRD AND AR$HLN FIELDS ALLOW THIS PROTOCOL
AND PACKET FORMAT TO BE USED FOR NON-10MBIT ETHERNETS.  FOR THE
10MBIT ETHERNET <AR$HRD, AR$HLN> TAKES ON THE VALUE <1, 6>.  FOR
OTHER HARDWARE NETWORKS, THE AR$PRO FIELD MAY NO LONGER
CORRESPOND TO THE ETHERNET TYPE FIELD, BUT IT SHOULD BE
ASSOCIATED WITH THE PROTOCOL WHOSE ADDRESS RESOLUTION IS BEING
SOUGHT.


WHY IS IT DONE THIS WAY??
-------------------------

PERIODIC BROADCASTING IS DEFINITELY NOT DESIRED.  IMAGINE 100
WORKSTATIONS ON A SINGLE ETHERNET, EACH BROADCASTING ADDRESS
RESOLUTION INFORMATION ONCE PER 10 MINUTES (AS ONE POSSIBLE SET
OF PARAMETERS).  THIS IS ONE PACKET EVERY 6 SECONDS.  THIS IS
ALMOST REASONABLE, BUT WHAT USE IS IT?  THE WORKSTATIONS AREN'T
GENERALLY GOING TO BE TALKING TO EACH OTHER (AND THEREFORE HAVE
100 USELESS ENTRIES IN A TABLE); THEY WILL BE MAINLY TALKING TO A

MAINFRAME, FILE SERVER OR BRIDGE, BUT ONLY TO A SMALL NUMBER OF
OTHER WORKSTATIONS (FOR INTERACTIVE CONVERSATIONS, FOR EXAMPLE).
THE PROTOCOL DESCRIBED IN THIS PAPER DISTRIBUTES INFORMATION AS
IT IS NEEDED, AND ONLY ONCE (PROBABLY) PER BOOT OF A MACHINE.

THIS FORMAT DOES NOT ALLOW FOR MORE THAN ONE RESOLUTION TO BE
DONE IN THE SAME PACKET.  THIS IS FOR SIMPLICITY.  IF THINGS WERE
MULTIPLEXED THE PACKET FORMAT WOULD BE CONSIDERABLY HARDER TO
DIGEST, AND MUCH OF THE INFORMATION COULD BE GRATUITOUS.  THINK
OF A BRIDGE THAT TALKS FOUR PROTOCOLS TELLING A WORKSTATION ALL
FOUR PROTOCOL ADDRESSES, THREE OF WHICH THE WORKSTATION WILL
PROBABLY NEVER USE.

THIS FORMAT ALLOWS THE PACKET BUFFER TO BE REUSED IF A REPLY IS
GENERATED; A REPLY HAS THE SAME LENGTH AS A REQUEST, AND SEVERAL
OF THE FIELDS ARE THE SAME.

THE VALUE OF THE HARDWARE FIELD (AR$HRD) IS TAKEN FROM A LIST FOR
THIS PURPOSE.  CURRENTLY THE ONLY DEFINED VALUE IS FOR THE 10MBIT
ETHERNET (ARES_HRD$ETHERNET = 1).  THERE HAS BEEN TALK OF USING
THIS PROTOCOL FOR PACKET RADIO NETWORKS AS WELL, AND THIS WILL
REQUIRE ANOTHER VALUE AS WILL OTHER FUTURE HARDWARE MEDIUMS THAT
WISH TO USE THIS PROTOCOL.

FOR THE 10MBIT ETHERNET, THE VALUE IN THE PROTOCOL FIELD (AR$PRO)
IS TAKEN FROM THE SET ETHER_TYPE$.  THIS IS A NATURAL REUSE OF
THE ASSIGNED PROTOCOL TYPES.  COMBINING THIS WITH THE OPCODE
(AR$OP) WOULD EFFECTIVELY HALVE THE NUMBER OF PROTOCOLS THAT CAN
BE RESOLVED UNDER THIS PROTOCOL AND WOULD MAKE A MONITOR/DEBUGGER
MORE COMPLEX (SEE NETWORK MONITORING AND DEBUGGING BELOW).  IT IS
HOPED THAT WE WILL NEVER SEE 32768 PROTOCOLS, BUT MURPHY MADE
SOME LAWS WHICH DON'T ALLOW US TO MAKE THIS ASSUMPTION.

IN THEORY, THE LENGTH FIELDS (AR$HLN AND AR$PLN) ARE REDUNDANT,
SINCE THE LENGTH OF A PROTOCOL ADDRESS SHOULD BE DETERMINED BY
THE HARDWARE TYPE (FOUND IN AR$HRD) AND THE PROTOCOL TYPE (FOUND
IN AR$PRO).  IT IS INCLUDED FOR OPTIONAL CONSISTENCY CHECKING,
AND FOR NETWORK MONITORING AND DEBUGGING (SEE BELOW).

THE OPCODE IS TO DETERMINE IF THIS IS A REQUEST (WHICH MAY CAUSE
A REPLY) OR A REPLY TO A PREVIOUS REQUEST.  16 BITS FOR THIS IS
OVERKILL, BUT A FLAG (FIELD) IS NEEDED.

THE SENDER HARDWARE ADDRESS AND SENDER PROTOCOL ADDRESS ARE
ABSOLUTELY NECESSARY.  IT IS THESE FIELDS THAT GET PUT IN A
TRANSLATION TABLE.

THE TARGET PROTOCOL ADDRESS IS NECESSARY IN THE REQUEST FORM OF
THE PACKET SO THAT A MACHINE CAN DETERMINE WHETHER OR NOT TO
ENTER THE SENDER INFORMATION IN A TABLE OR TO SEND A REPLY.  IT
IS NOT NECESSARILY NEEDED IN THE REPLY FORM IF ONE ASSUMES A
REPLY IS ONLY PROVOKED BY A REQUEST.  IT IS INCLUDED FOR
COMPLETENESS, NETWORK MONITORING, AND TO SIMPLIFY THE SUGGESTED
PROCESSING ALGORITHM DESCRIBED ABOVE (WHICH DOES NOT LOOK AT THE
OPCODE UNTIL AFTER PUTTING THE SENDER INFORMATION IN A TABLE).

THE TARGET HARDWARE ADDRESS IS INCLUDED FOR COMPLETENESS AND
NETWORK MONITORING.  IT HAS NO MEANING IN THE REQUEST FORM, SINCE
IT IS THIS NUMBER THAT THE MACHINE IS REQUESTING.  ITS MEANING IN
THE REPLY FORM IS THE ADDRESS OF THE MACHINE MAKING THE REQUEST.
IN SOME IMPLEMENTATIONS (WHICH DO NOT GET TO LOOK AT THE 14.BYTE
ETHERNET HEADER, FOR EXAMPLE) THIS MAY SAVE SOME REGISTER
SHUFFLING OR STACK SPACE BY SENDING THIS FIELD TO THE HARDWARE
DRIVER AS THE HARDWARE DESTINATION ADDRESS OF THE PACKET.

THERE ARE NO PADDING BYTES BETWEEN ADDRESSES.  THE PACKET DATA
SHOULD BE VIEWED AS A BYTE STREAM IN WHICH ONLY 3 BYTE PAIRS ARE
DEFINED TO BE WORDS (AR$HRD, AR$PRO AND AR$OP) WHICH ARE SENT
MOST SIGNIFICANT BYTE FIRST (ETHERNET/PDP-10 BYTE STYLE).


NETWORK MONITORING AND DEBUGGING:
---------------------------------

THE ABOVE ADDRESS RESOLUTION PROTOCOL ALLOWS A MACHINE TO GAIN
KNOWLEDGE ABOUT THE HIGHER LEVEL PROTOCOL ACTIVITY (E.G., CHAOS,
INTERNET, PUP, DECNET) ON AN ETHERNET CABLE.  IT CAN DETERMINE
WHICH ETHERNET PROTOCOL TYPE FIELDS ARE IN USE (BY VALUE) AND THE
PROTOCOL ADDRESSES WITHIN EACH PROTOCOL TYPE.  IN FACT, IT IS NOT
NECESSARY FOR THE MONITOR TO SPEAK ANY OF THE HIGHER LEVEL
PROTOCOLS INVOLVED.  IT GOES SOMETHING LIKE THIS:

WHEN A MONITOR RECEIVES AN ADDRESS RESOLUTION PACKET, IT ALWAYS
ENTERS THE <PROTOCOL TYPE, SENDER PROTOCOL ADDRESS, SENDER
HARDWARE ADDRESS> IN A TABLE.  IT CAN DETERMINE THE LENGTH OF THE
HARDWARE AND PROTOCOL ADDRESS FROM THE AR$HLN AND AR$PLN FIELDS
OF THE PACKET.  IF THE OPCODE IS A REPLY THE MONITOR CAN THEN
THROW THE PACKET AWAY.  IF THE OPCODE IS A REQUEST AND THE TARGET
PROTOCOL ADDRESS MATCHES THE PROTOCOL ADDRESS OF THE MONITOR, THE
MONITOR SENDS A REPLY AS IT NORMALLY WOULD.  THE MONITOR WILL
ONLY GET ONE MAPPING THIS WAY, SINCE THE REPLY TO THE REQUEST
WILL BE SENT DIRECTLY TO THE REQUESTING HOST.  THE MONITOR COULD
TRY SENDING ITS OWN REQUEST, BUT THIS COULD GET TWO MONITORS INTO
A REQUEST SENDING LOOP, AND CARE MUST BE TAKEN.

BECAUSE THE PROTOCOL AND OPCODE ARE NOT COMBINED INTO ONE FIELD,
THE MONITOR DOES NOT NEED TO KNOW WHICH REQUEST OPCODE IS
ASSOCIATED WITH WHICH REPLY OPCODE FOR THE SAME HIGHER LEVEL
PROTOCOL.  THE LENGTH FIELDS SHOULD ALSO GIVE ENOUGH INFORMATION
TO ENABLE IT TO "PARSE" A PROTOCOL ADDRESSES, ALTHOUGH IT HAS NO
KNOWLEDGE OF WHAT THE PROTOCOL ADDRESSES MEAN.

A WORKING IMPLEMENTATION OF THE ADDRESS RESOLUTION PROTOCOL CAN

ALSO BE USED TO DEBUG A NON-WORKING IMPLEMENTATION.  PRESUMABLY A
HARDWARE DRIVER WILL SUCCESSFULLY BROADCAST A PACKET WITH ETHERNET
TYPE FIELD OF ETHER_TYPE$ADDRESS_RESOLUTION.  THE FORMAT OF THE
PACKET MAY NOT BE TOTALLY CORRECT, BECAUSE INITIAL
IMPLEMENTATIONS MAY HAVE BUGS, AND TABLE MANAGEMENT MAY BE
SLIGHTLY TRICKY.  BECAUSE REQUESTS ARE BROADCAST A MONITOR WILL
RECEIVE THE PACKET AND CAN DISPLAY IT FOR DEBUGGING IF DESIRED.


AN EXAMPLE:
-----------

LET THERE EXIST MACHINES X AND Y THAT ARE ON THE SAME 10MBIT
ETHERNET CABLE.  THEY HAVE ETHERNET ADDRESS EA(X) AND EA(Y) AND
DOD INTERNET ADDRESSES IPA(X) AND IPA(Y) .  LET THE ETHERNET TYPE
OF INTERNET BE ET(IP).  MACHINE X HAS JUST BEEN STARTED, AND
SOONER OR LATER WANTS TO SEND AN INTERNET PACKET TO MACHINE Y ON
THE SAME CABLE.  X KNOWS THAT IT WANTS TO SEND TO IPA(Y) AND
TELLS THE HARDWARE DRIVER (HERE AN ETHERNET DRIVER) IPA(Y).  THE
DRIVER CONSULTS THE ADDRESS RESOLUTION MODULE TO CONVERT <ET(IP),
IPA(Y)> INTO A 48.BIT ETHERNET ADDRESS, BUT BECAUSE X WAS JUST
STARTED, IT DOES NOT HAVE THIS INFORMATION.  IT THROWS THE
INTERNET PACKET AWAY AND INSTEAD CREATES AN ADDRESS RESOLUTION
PACKET WITH
        (AR$HRD) = ARES_HRD$ETHERNET
        (AR$PRO) = ET(IP)
        (AR$HLN) = LENGTH(EA(X))
        (AR$PLN) = LENGTH(IPA(X))
        (AR$OP)  = ARES_OP$REQUEST
        (AR$SHA) = EA(X)
        (AR$SPA) = IPA(X)
        (AR$THA) = DON'T CARE
        (AR$TPA) = IPA(Y)
AND BROADCASTS THIS PACKET TO EVERYBODY ON THE CABLE.

MACHINE Y GETS THIS PACKET, AND DETERMINES THAT IT UNDERSTANDS
THE HARDWARE TYPE (ETHERNET), THAT IT SPEAKS THE INDICATED
PROTOCOL (INTERNET) AND THAT THE PACKET IS FOR IT
((AR$TPA)=IPA(Y)).  IT ENTERS (PROBABLY REPLACING ANY EXISTING
ENTRY) THE INFORMATION THAT <ET(IP), IPA(X)> MAPS TO EA(X).  IT
THEN NOTICES THAT IT IS A REQUEST, SO IT SWAPS FIELDS, PUTTING
EA(Y) IN THE NEW SENDER ETHERNET ADDRESS FIELD (AR$SHA), SETS THE
OPCODE TO REPLY, AND SENDS THE PACKET DIRECTLY (NOT BROADCAST) TO
EA(X).  AT THIS POINT Y KNOWS HOW TO SEND TO X, BUT X STILL
DOESN'T KNOW HOW TO SEND TO Y.

MACHINE X GETS THE REPLY PACKET FROM Y, FORMS THE MAP FROM
<ET(IP), IPA(Y)> TO EA(Y), NOTICES THE PACKET IS A REPLY AND
THROWS IT AWAY.  THE NEXT TIME X'S INTERNET MODULE TRIES TO SEND
A PACKET TO Y ON THE ETHERNET, THE TRANSLATION WILL SUCCEED, AND
THE PACKET WILL (HOPEFULLY) ARRIVE.  IF Y'S INTERNET MODULE THEN
WANTS TO TALK TO X, THIS WILL ALSO SUCCEED SINCE Y HAS REMEMBERED
THE INFORMATION FROM X'S REQUEST FOR ADDRESS RESOLUTION.

RELATED ISSUE:
---------------

IT MAY BE DESIRABLE TO HAVE TABLE AGING AND/OR TIMEOUTS.  THE
IMPLEMENTATION OF THESE IS OUTSIDE THE SCOPE OF THIS PROTOCOL.
HERE IS A MORE DETAILED DESCRIPTION (THANKS TO MOON@SCRC@MIT-MC).

IF A HOST MOVES, ANY CONNECTIONS INITIATED BY THAT HOST WILL
WORK, ASSUMING ITS OWN ADDRESS RESOLUTION TABLE IS CLEARED WHEN
IT MOVES.  HOWEVER, CONNECTIONS INITIATED TO IT BY OTHER HOSTS
WILL HAVE NO PARTICULAR REASON TO KNOW TO DISCARD THEIR OLD
ADDRESS.  HOWEVER, 48.BIT ETHERNET ADDRESSES ARE SUPPOSED TO BE
UNIQUE AND FIXED FOR ALL TIME, SO THEY SHOULDN'T CHANGE.  A HOST
COULD "MOVE" IF A HOST NAME (AND ADDRESS IN SOME OTHER PROTOCOL)
WERE REASSIGNED TO A DIFFERENT PHYSICAL PIECE OF HARDWARE.  ALSO,
AS WE KNOW FROM EXPERIENCE, THERE IS ALWAYS THE DANGER OF
INCORRECT ROUTING INFORMATION ACCIDENTALLY GETTING TRANSMITTED
THROUGH HARDWARE OR SOFTWARE ERROR; IT SHOULD NOT BE ALLOWED TO
PERSIST FOREVER.  PERHAPS FAILURE TO INITIATE A CONNECTION SHOULD
INFORM THE ADDRESS RESOLUTION MODULE TO DELETE THE INFORMATION ON
THE BASIS THAT THE HOST IS NOT REACHABLE, POSSIBLY BECAUSE IT IS
DOWN OR THE OLD TRANSLATION IS NO LONGER VALID.  OR PERHAPS
RECEIVING OF A PACKET FROM A HOST SHOULD RESET A TIMEOUT IN THE
ADDRESS RESOLUTION ENTRY USED FOR TRANSMITTING PACKETS TO THAT
HOST; IF NO PACKETS ARE RECEIVED FROM A HOST FOR A SUITABLE
LENGTH OF TIME, THE ADDRESS RESOLUTION ENTRY IS FORGOTTEN.  THIS
MAY CAUSE EXTRA OVERHEAD TO SCAN THE TABLE FOR EACH INCOMING
PACKET.  PERHAPS A HASH OR INDEX CAN MAKE THIS FASTER.

THE SUGGESTED ALGORITHM FOR RECEIVING ADDRESS RESOLUTION PACKETS
TRIES TO LESSEN THE TIME IT TAKES FOR RECOVERY IF A HOST DOES
MOVE.  RECALL THAT IF THE <PROTOCOL TYPE, SENDER PROTOCOL
ADDRESS> IS ALREADY IN THE TRANSLATION TABLE, THEN THE SENDER
HARDWARE ADDRESS SUPERSEDES THE EXISTING ENTRY.  THEREFORE, ON A
PERFECT ETHERNET WHERE A BROADCAST REQUEST REACHES ALL STATIONS
ON THE CABLE, EACH STATION WILL BE GET THE NEW HARDWARE ADDRESS.

ANOTHER ALTERNATIVE IS TO HAVE A DAEMON PERFORM THE TIMEOUTS.
AFTER A SUITABLE TIME, THE DAEMON CONSIDERS REMOVING AN ENTRY.
IT FIRST SENDS (WITH A SMALL NUMBER OF RETRANSMISSIONS IF NEEDED)
AN ADDRESS RESOLUTION PACKET WITH OPCODE REQUEST DIRECTLY TO THE
ETHERNET ADDRESS IN THE TABLE.  IF A REPLY IS NOT SEEN IN A SHORT
AMOUNT OF TIME, THE ENTRY IS DELETED.  THE REQUEST IS SENT
DIRECTLY SO AS NOT TO BOTHER EVERY STATION ON THE ETHERNET.  JUST
FORGETTING ENTRIES WILL LIKELY CAUSE USEFUL INFORMATION TO BE
FORGOTTEN, WHICH MUST BE REGAINED.

SINCE HOSTS DON'T TRANSMIT INFORMATION ABOUT ANYONE OTHER THAN
THEMSELVES, REBOOTING A HOST WILL CAUSE ITS ADDRESS MAPPING TABLE
TO BE UP TO DATE.  BAD INFORMATION CAN'T PERSIST FOREVER BY BEING
PASSED AROUND FROM MACHINE TO MACHINE; THE ONLY BAD INFORMATION
THAT CAN EXIST IS IN A MACHINE THAT DOESN'T KNOW THAT SOME OTHER
MACHINE HAS CHANGED ITS 48.BIT ETHERNET ADDRESS.  PERHAPS
MANUALLY RESETTING (OR CLEARING) THE ADDRESS MAPPING TABLE WILL
SUFFICE.

THIS ISSUE CLEARLY NEEDS MORE THOUGHT IF IT IS BELIEVED TO BE
IMPORTANT.  IT IS CAUSED BY ANY ADDRESS RESOLUTION-LIKE PROTOCOL.


